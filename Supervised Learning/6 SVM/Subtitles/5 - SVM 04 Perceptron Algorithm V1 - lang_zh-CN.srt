1
00:00:00,000 --> 00:00:02,279
所以 为了构建这个误差函数

2
00:00:02,279 --> 00:00:05,699
我们来回顾一下之前出现过的 感知机算法

3
00:00:05,700 --> 00:00:08,115
感知机算法通过以下方式工作

4
00:00:08,115 --> 00:00:09,660
我们有一些红色和蓝色的数据点

5
00:00:09,660 --> 00:00:13,530
需要一条完美的线来划分这些点

6
00:00:13,529 --> 00:00:17,054
现在 这条线的方程式为 Wx+b=0

7
00:00:17,054 --> 00:00:20,399
其中 W 和 x 为向量 b 为标量

8
00:00:20,399 --> 00:00:21,869
所以它更像是

9
00:00:21,870 --> 00:00:25,095
w1x1+w2x2+b=0

10
00:00:25,094 --> 00:00:30,269
简单示例一下 假设方程式为 3x1+4x2+5=0

11
00:00:30,269 --> 00:00:33,295
然后我们希望 用误差函数来惩罚这条线

12
00:00:33,295 --> 00:00:37,390
粗略地测算出有多少点被误分类

13
00:00:37,390 --> 00:00:40,240
它实际上更像是在测算所有误分类的点

14
00:00:40,240 --> 00:00:43,855
到这条线的距离的总和

15
00:00:43,854 --> 00:00:46,419
我们可以将这些点分成红点和蓝点

16
00:00:46,420 --> 00:00:48,370
两个数据集

17
00:00:48,369 --> 00:00:52,179
我们的误差函数会根据这些点到主线的距离

18
00:00:52,179 --> 00:00:56,244
惩罚左边线上方的两个红点

19
00:00:56,244 --> 00:01:00,299
及右边线下方的两个蓝点

20
00:01:00,299 --> 00:01:02,479
所以 我们误差函数的一半就是这样的

21
00:01:02,479 --> 00:01:05,325
即线条上方的蓝色区域

22
00:01:05,325 --> 00:01:07,950
红点距离蓝色区域越近

23
00:01:07,950 --> 00:01:09,480
就会受到越多惩罚

24
00:01:09,480 --> 00:01:12,998
这意味着距离线近的点惩罚小

25
00:01:12,998 --> 00:01:15,465
距离线远的惩罚大

26
00:01:15,465 --> 00:01:18,150
该误差函数的另一部分则完全相反

27
00:01:18,150 --> 00:01:21,015
它惩罚红色区域的蓝点

28
00:01:21,015 --> 00:01:23,798
距离线近的点惩罚较小

29
00:01:23,798 --> 00:01:27,030
距离线远的点惩罚较大

30
00:01:27,030 --> 00:01:29,070
我们在这里应用一下数学

31
00:01:29,069 --> 00:01:32,114
思考每个点的误差是多少

32
00:01:32,114 --> 00:01:37,140
我们之前提到有方程式 Wx+b=0

33
00:01:37,140 --> 00:01:39,010
这是一个线性方程

34
00:01:39,010 --> 00:01:42,500
Wx+b 可以是任意值

35
00:01:42,500 --> 00:01:45,680
它是一条和主线平行

36
00:01:45,680 --> 00:01:50,195
且略高于主线的线 依次取值 2 3 4

37
00:01:50,194 --> 00:01:51,859
同样 在另一方

38
00:01:51,859 --> 00:01:53,162
取值 -1

39
00:01:53,162 --> 00:01:54,829
-2 -3

40
00:01:54,829 --> 00:01:56,817
-4 等等

41
00:01:56,817 --> 00:01:58,474
基本上 这就是误差

42
00:01:58,474 --> 00:02:00,799
它就是 Wx+b 的值

43
00:02:00,799 --> 00:02:03,125
实际上 因为我们有负数

44
00:02:03,125 --> 00:02:06,260
它取的是 Wx+b 的绝对值

45
00:02:06,260 --> 00:02:10,115
现在 我们来计算被误分类的点的误差

46
00:02:10,115 --> 00:02:13,370
比如 这个红点误差为 2.5

47
00:02:13,370 --> 00:02:16,080
因为它落在线 2.5 上 

48
00:02:16,080 --> 00:02:18,540
在这条线上 Wx+b 为 2.5

49
00:02:18,539 --> 00:02:20,864
这个误差为 0.5

50
00:02:20,865 --> 00:02:24,420
这些点的误差为 1 和 2

51
00:02:24,419 --> 00:02:28,409
不要忘了这边误差为 Wx+b 的绝对值

52
00:02:28,409 --> 00:02:32,189
然后 我们把这个模型给出的所有误差相加 计算出来 

53
00:02:32,189 --> 00:02:34,919
所以这个模型给出的误差为 6

54
00:02:34,919 --> 00:02:37,030
现在我们将这两部分合起来

55
00:02:37,031 --> 00:02:40,147
我们得到结论 这个模型的误差为 6

56
00:02:40,147 --> 00:02:44,039
然后 通过梯度下降法来最小化误差

57
00:02:44,039 --> 00:02:48,794
从而找到理想的 W 和 b 来给出可能的最优分割

58
00:02:48,794 --> 00:02:51,489
就是感知机算法

