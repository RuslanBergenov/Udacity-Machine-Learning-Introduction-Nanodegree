1
00:00:00,000 --> 00:00:01,780
那么我们来复习一下

2
00:00:01,780 --> 00:00:05,070
我们得到所有这些学生的数据

3
00:00:05,070 --> 00:00:09,629
蓝点代表接受的学生 红点代表拒绝的学生

4
00:00:09,630 --> 00:00:15,705
我们得到的模型包含方程式 2*Test+Grades-18

5
00:00:15,705 --> 00:00:18,390
可以得到这个边界线

6
00:00:18,390 --> 00:00:22,140
其中分数为 0 和一个预测

7
00:00:22,140 --> 00:00:26,445
预测说明如果分数为正或 0 学生被接受

8
00:00:26,445 --> 00:00:28,839
如果分数为负 学生被拒绝

9
00:00:28,839 --> 00:00:31,440
所以现在我们介绍感知器的概念

10
00:00:31,440 --> 00:00:33,359
这是神经网络的基础

11
00:00:33,359 --> 00:00:36,310
是指把我们的方程式进行编码 形成小图形

12
00:00:36,310 --> 00:00:38,625
我们构建的方式如下

13
00:00:38,625 --> 00:00:42,475
这是我们的数据和分界线 我们在节点内进行拟合

14
00:00:42,475 --> 00:00:44,760
现在我们增加输入的小节点

15
00:00:44,759 --> 00:00:47,619
在这个例子中分别是测试 (Test) 和分数 (Grades)

16
00:00:47,619 --> 00:00:52,399
在这个例子中我们可以看到 测试为 7 分数为 6

17
00:00:52,399 --> 00:00:55,439
感知器要做的把点 (7,6) 转为块

18
00:00:55,439 --> 00:00:59,259
检查这个点位于正数或负数区域

19
00:00:59,259 --> 00:01:00,640
如果这个点位于正数区域

20
00:01:00,640 --> 00:01:02,009
会返回 是

21
00:01:02,009 --> 00:01:05,784
如果位于负数区域 会返回 否

22
00:01:05,784 --> 00:01:08,879
我们来回忆下方程式 Score=

23
00:01:08,879 --> 00:01:12,689
2*Test+Grades-18

24
00:01:12,689 --> 00:01:15,149
我们预测包括 如果分数为正数或 0

25
00:01:15,150 --> 00:01:17,550
那么接受这个学生

26
00:01:17,549 --> 00:01:20,709
如果分数为负 就会拒绝这个学生

27
00:01:20,709 --> 00:01:23,849
这些权重 2 1 和 -18

28
00:01:23,849 --> 00:01:27,596
定义了线性方程式

29
00:01:27,596 --> 00:01:30,409
所以我们在图形中使用它们作为标签

30
00:01:30,409 --> 00:01:34,484
2 和 1 分别标记了 X1 和 X2 的边缘

31
00:01:34,484 --> 00:01:38,655
而偏置单元 -18 标记了节点

32
00:01:38,655 --> 00:01:40,799
我们看到含有这些标签的节点

33
00:01:40,799 --> 00:01:44,384
想起它们生成的线性方程式

34
00:01:44,385 --> 00:01:48,165
另一种抓取这个节点的方式是把偏差考虑成输入的一部分

35
00:01:48,165 --> 00:01:51,815
既然 W1 乘以 X1  W2 乘以 X2

36
00:01:51,814 --> 00:01:54,609
很容易可以想到 B 乘以 1

37
00:01:54,609 --> 00:01:58,983
所以我们可以标记 B 边缘为 1

38
00:01:58,983 --> 00:02:01,890
那么这个节点可以把输入节点的值

39
00:02:01,890 --> 00:02:05,760
乘以对应边缘的值

40
00:02:05,760 --> 00:02:07,300
然后添加它们

41
00:02:07,299 --> 00:02:10,240
最后检查结果是否大于或等于 0

42
00:02:10,240 --> 00:02:14,260
如果是 那么节点返回 是 以及值 1

43
00:02:14,259 --> 00:02:18,924
如果不是 那么节点返回 否 以及值 0

44
00:02:18,925 --> 00:02:20,760
我们使用在整个类别中使用两种符号法

45
00:02:20,759 --> 00:02:23,474
虽然第二个更为常用

46
00:02:23,474 --> 00:02:24,948
在通常情况下

47
00:02:24,949 --> 00:02:26,690
这是节点的样子

48
00:02:26,689 --> 00:02:29,789
我们在这里有节点 然后添加输入

49
00:02:29,789 --> 00:02:34,344
值 X1 到 Xn 和 1

50
00:02:34,344 --> 00:02:38,294
边缘为权重 W1 到 Wn

51
00:02:38,294 --> 00:02:42,179
B 对应偏置单元

52
00:02:42,180 --> 00:02:45,629
那么节点计算线性方程 Wx+B

53
00:02:45,629 --> 00:02:49,757
即 Wixi+B

54
00:02:49,757 --> 00:02:53,545
i 从 1 到 n 的总和

55
00:02:53,545 --> 00:02:57,314
然后节点检查了值是否为 0 或大于 0

56
00:02:57,314 --> 00:03:01,889
如果是 那么返回值 1 和是

57
00:03:01,889 --> 00:03:05,844
如果不是 那么返回值 0 和否

58
00:03:05,844 --> 00:03:07,650
注意我们使用一个隐函数

59
00:03:07,650 --> 00:03:10,340
又称为阶跃函数

60
00:03:10,340 --> 00:03:14,325
如果输入为正数或 0 阶跃函数返回 1

61
00:03:14,324 --> 00:03:16,919
如果输入为负 阶跃函数返回 0

62
00:03:16,919 --> 00:03:21,389
那么实际上 这些感知器可以看作节点的组合

63
00:03:21,389 --> 00:03:23,879
其中第一个节点计算线性方程式和权重上的输入

64
00:03:23,879 --> 00:03:28,782
第一个节点把阶跃函数应用到结果中

65
00:03:28,782 --> 00:03:30,704
可以用以下图形进行表示

66
00:03:30,705 --> 00:03:34,005
求和符号代表第一个节点的线性函数

67
00:03:34,004 --> 00:03:37,305
绘图表示第二个节点的阶跃函数

68
00:03:37,305 --> 00:03:40,110
随后我们会使用不同的阶跃函数

69
00:03:40,110 --> 00:03:43,385
因此这是说明节点中指明阶跃函数有效性的原因

70
00:03:43,384 --> 00:03:46,284
正如我们所了解的 表示传感器有两种方法

71
00:03:46,284 --> 00:03:50,490
左侧是来自输入节点值为 1 的偏置单元

72
00:03:50,490 --> 00:03:54,370
右侧是包含在节点中的偏差

